- name: Deploy reservation
  hosts: all
  serial: 1
  vars:
    proj_name: reservation
    proj_dir: "/opt/{{ proj_name }}"

    registry_addr: '{{ lookup("env", "REGISTRY_ADDR") }}'
    registry_access_token: '{{ lookup("env", "REGISTRY_ACCESS_TOKEN") }}'
    image_tag: '{{ lookup("env", "IMAGE_TAG") }}'
    port: 7567

  tasks:
  - name: Test service
    stat: path={{ proj_dir }}/docker-compose.yml
    register: compose_file

  - name: Create dest catalog
    file:
      path: "{{ item }}"
      state: directory
      mode: 0755
    with_items:
    - "{{ proj_dir }}"
    - "{{ proj_dir }}/logs"

  - name: Common configs
    template:
      src: "{{ item.src }}"
      dest: "{{ item.dest }}"
    with_items:
    - {src: deploy.env.j2, dest: "{{ proj_dir }}/{{ proj_name }}.env"}

  - name: Docker login
    community.docker.docker_login:
      username: gitlab-ci-token
      password: "{{ registry_access_token }}"
      registry_url: "{{ registry_addr }}"

  - name: Docker-compose down
    community.docker.docker_compose:
      project_src: "{{ proj_dir }}"
      files: [docker-compose.yml]
      state: absent
    when: compose_file.stat.exists

  - name: Copy docker-compose
    template:
      src: docker-compose.yml.j2
      dest: "{{ proj_dir }}/docker-compose.yml"

  - name: Docker-compose up
    community.docker.docker_compose:
      project_src: "{{ proj_dir }}"
      files: [docker-compose.yml]
      pull: yes

  - name: Wait for 10 sec
    wait_for:
      timeout: 10

  - name: Wait for instance to be up and running
    wait_for:
      host: "{{ ansible_host }}"
      port: "{{ port }}"
      timeout: 60 # sec

  - name: Test work server {{ inventory_hostname }}:{{ port }}
    uri:
      url: "http://{{ ansible_host }}:{{ port }}/self_check"
      body_format: json
      return_content: yes
    register: pg_inst

  - name: Fail if error page {{ port }} content
    fail:
      msg: "error: {{ pg_inst.content }}"
    when: pg_inst.json.message != 'Ok'
